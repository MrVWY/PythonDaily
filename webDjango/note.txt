Django：Python 界最全能的 web 开发框架，battery-include 各种功能完备，可维护性和开发速度一级棒。常有人说 Django 慢，其实主要
慢在 Django ORM 与数据库的交互上，所以是否选用 Django，取决于项目对数据库交互的要求以及各种优化。而对于 Django 的同步特性导致吞
吐量小的问题，其实可以通过 Celery 等解决，倒不是一个根本问题。Django 的项目代表：Instagram，Guardian。

Tornado：天生异步，性能强悍是 Tornado 的名片，然而 Tornado 相比 Django 是较为原始的框架，
诸多内容需要自己去处理。当然，随着项目越来越大，框架能够提供的功能占比越来越小，更多的内容需要团队自己去实现，
而大项目往往需要性能的保证，这时候 Tornado 就是比较好的选择。Tornado项目代表：知乎。

Flask：微框架的典范，号称 Python 代码写得最好的项目之一。Flask 的灵活性，
也是双刃剑：能用好 Flask 的，可以做成 Pinterest，用不好就是灾难（显然对任何框架都是这样）。
Flask 虽然是微框架，但是也可以做成规模化的 Flask。加上 Flask 可以自由选择自己的数据库交互组件（通常是 Flask-SQLAlchemy），
而且加上 celery +redis 等异步特性以后，Flask 的性能相对 Tornado 也不逞多让，也许Flask 的灵活性可能是某些团队更需要的。




Django
一、
1、 django-admin startproject '工程名称'
    '文件名称'
          -'工程名称'  对整个程序进行配置
            -init
            -settings   配置文件
            -url        URL对应关系
            -wsgi       uwsgi+nginx
          -manage.py        管理Django程序:
                                    -python manage.py
                                    -python manage.py startapp xx
                                    -python manage.py makemigrations
                                    -python manage.py  migrate

运行django(python3)   python manage.py runserver IP:port  127.0.0.1:port
创建APP   python manage.py startapp  '名称'

app:
    migrations 数据修改表结构
    admin  Django为我们提供的后台管理
    apps  配置当前APP
    model ORM，写指定的类通过命令可以创建数据库结构
    tests 单元测试
    views 业务代码

    1、配置模板的路径（setting.py）
                TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [os.path.join(BASE_DIR, 'templates')]   templates为模板存放的文件名
                ,
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
     2、配置静态目录
      STATICFILES_DIRS = (
            os.path.join(BASE_DIR, "static/"),
        )
内容：
    1、创建Django工程
         django-admin startproject '工程名称'
     2、创建APP
         python manage.py startapp  '名称'
     3、静态文件（存放css javascript）
        python setting.py中
        STATIC_URL = '/static/'
        #静态目录配置
        STATICFILES_DIRS = (
            os.path.join(BASE_DIR, "static/"),
        )    #static（静态文件存放的文件名）保持一致
      4、模板路径（也就是存放html文件的路径）
             在setting.py中
             ROOT_URLCONF = 'webDjango.urls'
            TEMPLATES = [
                {
                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
                    'DIRS': [os.path.join(BASE_DIR, 'templates')]
                    ,
                    'APP_DIRS': True,
                    'OPTIONS': {
                        'context_processors': [
                            'django.template.context_processors.debug',
                            'django.template.context_processors.request',
                            'django.contrib.auth.context_processors.auth',
                            'django.contrib.messages.context_processors.messages',
                        ],
                    },
                },
             ]
           'DIRS': [os.path.join(BASE_DIR, 'templates')]中的templates为存放HTML的文件名
       5、注释setting.py中的middlerware 的csrf
       6、定义路由规则url.py
       7、定义视图函数app下的view.py
            def func(request):
                request.method    --post get
                request.POST.get('',None)
                return HttpRespone('字符串')
                return render(request,'HTML模板的路径')
                return redirect('/HTML模板的路径')
        8、模板渲染
            特殊的模板语言  （模板语言 https://www.cnblogs.com/CongZhang/p/5944463.html）
                def func(request):
                    return render(request,'index.html',{'current_user':'lzaiah'})

                 index.html
                 <html>
                    <body>
                        <div>{{current_user}}</div>
                    </body>
                 </html>

                 ===>>最后生成
                 <html>
                    <body>
                        <div>lzaiah</div>
                    </body>
                 </html>

二、
1、Django请求生命周期
   -->URL对应关系（匹配） -->视图函数 -->返回用户字符串
   -->URL对应关系（匹配） -->视图函数 -->打开一个HTML文件，读取内存

2、FBV & CBV
     function base view
         url.py
            index ->函数名
          view.py
            def 函数(request)
                ...
     CBV: index ->类
     FBV: index ->函数名

     CBV中的装饰器
     from django.utils.decorator import method_decorator
     @method_decorator()

3、关于url.py中的name的设置
    对URL路由关系进行命名，以后可以根据此名称生成自己想要的URL
    path('index/',views.index,name='index123')
    path('index/(\d+)/',views.index,name='index123')
    path('index/(\d+)/',views.index,name='index123')

    模板语言
        {% url 'index123' %}
        {% url 'index123'number %}
     注：
        request.path_info #当前的URL

     from django.urls import reverse #生成URL

4、路由分发
     path('cmdb/', include('app01.urls')),
     path('monitor/', include('app02.urls')),

5、Djngo内置的后台管理
    path('admin/', admin.site.urls),#Django后台管理
    python manage.py createsuperuser

6、ORM操作
1、创建类
#表名 a_userinfo
 class UserInfo(models.Model):
    #id列 自增 主键
    #用户名列，字符串类型，指定长度
    username = models.CharField(max_length=32)
    -根据类自动创建数据库表
        #app下的models.py （不要改名字）
            命令：
                python namage.py makemigrations
                python namage.py migrate
            先在setting.py 修改
                默认：
                     NSTALLED_APPS = [
                            'django.contrib.admin', #管理站点。
                            'django.contrib.auth',  #认证系统
                            'django.contrib.contenttypes', # 内容类型的框架
                            'django.contrib.sessions',#会话框架
                            'django.contrib.messages',#消息传递框架。
                            'django.contrib.staticfiles',#用于管理静态文件的框架。
                        ]
                 修改后：
                        NSTALLED_APPS = [
                            'django.contrib.admin', #管理站点。
                            'django.contrib.auth',  #认证系统
                            'django.contrib.contenttypes', # 内容类型的框架
                            'django.contrib.sessions',#会话框架
                            'django.contrib.messages',#消息传递框架。
                            'django.contrib.staticfiles',#用于管理静态文件的框架。
                            'app name' #这里填写你创建APP的名称
                        ]
                  配置其他数据库(参考文档：# Database  # https://docs.djangoproject.com/en/2.2/ref/settings/#databases )
                       DATABASES = {
                            'default': {
                                ................
                            }
                        }
                   Django默认使用Mysql模块链接mysql，需要在project目录下的__init__.py下
                        import pymysql
                        pymysql.install_as_mysqldb()

2、根据类对数据库表中进行数据操作
#创建
    models.UserInfo.objects.create(username='root',password='toor')
    dic = {'username':'root2','password':'toor2'}
    models.UserInfo.objects.create(**dic)
    #创建
    obj = models.UserInfo(username='root1',password='toor1')
    obj.save()
    #查
    result = models.UserInfo.objects.all()
    #result.QuerySet => Django =>[]
    #[obj(id,username,password),obj(id,username,password),obj(id,username,password)]
    result = models.UserInfo.objects.filter(username='root',password='toor')
    #删除
    models.UserInfo.objects.filter(username='root', password='toor').delete()
    #更新
    models.UserInfo.objects.all().update(password='1')
    models.UserInfo.objects.filter(username='root').update(password='1')
    for row in result:
        print(row.id,row.username,row.password)


3、Django提供html网页的继承和引入机制，减少重复代码
{% extends '××.html' %}
关键语法：{% block 这里填一个名称 %} {% endblock %}
{% include '××.html' %}导入模块里面可以只有<form></form>

https://blog.csdn.net/xujin0/article/details/83420633

4、关于视图中的request
from django.core.handlers.wsgi import WSGIRequest
    request.environ 封装了所有用户的请求信息
    request.environ['']
    for k,v in request.environ.item():
        print(k,v)

5、django自定义filter和自定义simpletag
    1.在APP中新建包templatetags
    2.创建任意的py文件
    3.创建template对象 register
        from django import template
	    register=template.Library()	#固定变量名
	    @register.filter    或者 @register.simple_tag
	    def multi(num1,num2):
		    return num1*num2
        filter函数的参数只有2个 不能加空格 能作为if条件
        simple_tag不能作为if条件 参数任意
    4.记得在settings 中注册APP
    5.在html顶部加一句 {% load py的名称 %}
    下面就 {{% 函数名 参数1 参数2 ..... %}}

6、
    XSS：
        {{ Paging_list_1|safe }}
       或者
        from django.utils.safestring import mark_safe
            Paging_list_2= mark_safe(Paging_list_2)

7、关于input type=file
$("#file").change(res=>{
                console.log($("#file"));
                console.log($("#file").val())
});
可以获取一个关于file文件的相关信息  其中一个是关于文件路径的  C:\fakepath\....
fakepath是浏览器自动帮你隐藏了真实的路径 要设置浏览器  自行百度